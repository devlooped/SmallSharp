<Project>

  <UsingTask AssemblyFile="SmallSharp.Build.dll" TaskName="OpenStartupFile" Condition="'$(BuildingInsideVisualStudio)' == 'true'" />

  <PropertyGroup>
    <DefaultItemExcludesInProjectFolder>*$(DefaultLanguageSourceExtension)</DefaultItemExcludesInProjectFolder>
    <MSBuildShortVersion>$(MSBuildVersion.TrimEnd('0123456789').TrimEnd('.'))</MSBuildShortVersion>
    <UserProjectNamespace>
      <Namespace Prefix="msb" Uri="http://schemas.microsoft.com/developer/msbuild/2003" />
    </UserProjectNamespace>
    <StartupFile>$(ActiveDebugProfile)</StartupFile>
  </PropertyGroup>

  <ItemGroup>
    <None Include="*$(DefaultLanguageSourceExtension)" Exclude="$(ActiveDebugProfile)" />
    <Compile Include="$(ActiveDebugProfile)" Condition="Exists('$(ActiveDebugProfile)')" />
  </ItemGroup>

  <ItemGroup>
    <CompilerVisibleProperty Include="MSBuildProjectDirectory" />
    <CompilerVisibleProperty Include="ActiveDebugProfile" />
    <CompilerVisibleProperty Include="DebugSourceGenerators" Condition="$(DebugSourceGenerators) != ''" />
    <CompilerVisibleProperty Include="DebugSmallSharp" Condition="$(DebugSmallSharp) != ''" />
    <CompilerVisibleProperty Include="OpenStartupFile" Condition="$(OpenStartupFile) != ''" />
    <CompilerVisibleProperty Include="OpenFromCompilationStart" Condition="$(OpenFromCompilationStart) != ''" />
    <CompilerVisibleProperty Include="OpenFromAdditionalFile" Condition="$(OpenFromAdditionalFile) != ''" />
    <CompilerVisibleProperty Include="OpenFromSymbolStart" Condition="$(OpenFromSymbolStart) != ''" />
    <CompilerVisibleItemMetadata Include="AdditionalFiles" MetadataName="SourceItemType" />
  </ItemGroup>

  <Target Name="EnsureVisualStudio" BeforeTargets="BeforeCompile;CoreCompile" Condition="$(MSBuildShortVersion) &lt; '16.8'">
    <!-- Top-level programs require this, so does our source generator. -->
    <Error Text="SmallSharp requires Visual Studio 16.8 or greater." />
  </Target>

  <Target Name="SelectStartupFile" BeforeTargets="BeforeCompile;CoreCompile"
          Condition="'$(StartupFile)' == '' or !Exists('$(StartupFile)')">

    <PropertyGroup Condition="'$(ActiveDebugProfile)' == '' or !Exists('$(ActiveDebugProfile)')">
      <FindStartupFile>true</FindStartupFile>
    </PropertyGroup>
    <ItemGroup Condition="'$(FindStartupFile)' == 'true'">
      <CandidateCompile Include="*$(DefaultLanguageSourceExtension)" />
      <ReversedCompile Include="@(CandidateCompile -> Reverse())" />
    </ItemGroup>
    <PropertyGroup Condition="'$(FindStartupFile)' == 'true'">
      <StartupFile>%(ReversedCompile.Identity)</StartupFile>
    </PropertyGroup>

    <!-- If .user file doesn't exist at all, create it now -->
    <PropertyGroup Condition="!Exists('$(MSBuildProjectFullPath).user')">
      <UserProject>
        <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
          <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
            <DebuggerFlavor>ProjectDebugger</DebuggerFlavor>
          </PropertyGroup>
          <PropertyGroup>
            <ActiveDebugProfile>$(StartupFile)</ActiveDebugProfile>
          </PropertyGroup>
        </Project>
      </UserProject>
      <WriteStartupFile>false</WriteStartupFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(MSBuildProjectFullPath).user"
                      Lines="$(UserProject)"
                      Condition="!Exists('$(MSBuildProjectFullPath).user')" />

    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(StartupFile)"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(WriteStartupFile)' != 'false' and '$(StartupFile)' != ''"/>

    <XmlPeek XmlInputPath="$(MSBuildProjectFullPath).user"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile/text()"
             Namespaces="$(UserProjectNamespace)">
      <Output TaskParameter="Result" PropertyName="StartupDebugProfile" />
    </XmlPeek>

    <PropertyGroup Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'">
      <ActiveDebugProfileProperty>
        <ActiveDebugProfile>$(StartupFile)</ActiveDebugProfile>
      </ActiveDebugProfileProperty>
    </PropertyGroup>

    <!-- The ActiveDebugProfile property element may be missing, failing to write the value -->
    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(ActiveDebugProfileProperty)"
             Query="/msb:Project/msb:PropertyGroup"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <!-- Read again after we poke the ActiveDebugProfile property -->
    <XmlPeek XmlInputPath="$(MSBuildProjectFullPath).user"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile/text()"
             Namespaces="$(UserProjectNamespace)">
      <Output TaskParameter="Result" PropertyName="StartupDebugProfile" />
    </XmlPeek>

    <!-- The entire PropertyGroup could have been missing, failing to write the value -->
    <PropertyGroup Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'">
      <UserPropertyGroup>
        <PropertyGroup>
          <ActiveDebugProfile>$(StartupFile)</ActiveDebugProfile>
        </PropertyGroup>
      </UserPropertyGroup>
    </PropertyGroup>

    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(UserPropertyGroup)"
             Query="/msb:Project"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <!-- Read again after we poke the PropertyGroup -->
    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(StartupFile)"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile/text()"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <Warning Text="Could not set ActiveDebugProfile=$(StartupFile). Run the project once to fix it."
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <ItemGroup>
      <Compile Include="$(StartupFile)" Condition="'$(StartupFile)' != ''" />
    </ItemGroup>
  </Target>

  <Target Name="OpenStartupFile" 
          BeforeTargets="CompileDesignTime"
          DependsOnTargets="SelectStartupFile"
          Condition="'$(OpenStartupFile)' != 'false' and 
                     '$(BuildingInsideVisualStudio)' == 'true' and 
                     '$(StartupFile)' != '' and 
                     ('$(SkipCompilerExecution)' == 'true' or '$(DesignTimeBuild)' == 'true')">
    <!-- NOTE: we only open the startup file in a design-time build since for the real build, 
         we assume the DTB has already happened, since it's executed right after changing the 
         launch profile. We also only do this inside VS for obvious reasons. -->
    <OpenStartupFile FlagFile="$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(BaseIntermediateOutputPath)', 'OpenedStartupFile.txt'))"
                     StartupFile="$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(StartupFile)'))" />
  </Target>

  <!-- Adds the additional files that the source generator uses to emit the launch profiles. -->
  <Target Name="AddTopLevelCompile" BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun">
    <ItemGroup>
      <AdditionalFiles Include="*$(DefaultLanguageSourceExtension)" SourceItemType="Compile" />
    </ItemGroup>
  </Target>

  <!-- Make sure changing the launch profiles refreshes the design-time build -->
  <Target Name="AddUpToDateCheckInputDesignTime" BeforeTargets="CollectUpToDateCheckInputDesignTime">
    <ItemGroup>
      <UpToDateCheckInput Include="$(MSBuildProjectDirectory)\Properties\launchSettings.json" />
      <UpToDateCheckInput Include="$(MSBuildProjectFullPath).user" />
    </ItemGroup>
  </Target>

</Project>
