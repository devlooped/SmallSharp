<Project>

  <UsingTask AssemblyFile="SmallSharp.dll" TaskName="EmitTargets" />
  <UsingTask AssemblyFile="JsonPoke.dll" TaskName="JsonPoke"/>

  <PropertyGroup>
    <UserProjectNamespace>
      <Namespace Prefix="msb" Uri="http://schemas.microsoft.com/developer/msbuild/2003" />
    </UserProjectNamespace>
    <!-- Backs compat -->
    <ActiveFile Condition="'$(ActiveCompile)' != ''">$(ActiveCompile)</ActiveFile>
    <StartupFile>$(ActiveFile)</StartupFile>
    <StartupFile Condition="'$(StartupFile)' == ''">$(Start)</StartupFile>
    <StartupFile Condition="'$(StartupFile)' == ''">$(S)</StartupFile>
    <StartupFile Condition="'$(StartupFile)' == ''">$(ActiveDebugProfile)</StartupFile>
    <FindStartupFile Condition="'$(StartupFile)' == '' or !Exists('$(StartupFile)')">true</FindStartupFile>
    <StartupFileDependsOn>EnsureProperties;CollectStartupFile;SelectStartupFile;SelectTopLevelCompile;UpdateLaunchSettings;EmitTargets</StartupFileDependsOn>
    
    <!-- For CLI dotnet run, users must set ImportProjectExtensionProps/ImportProjectExtensionTargets=true -->
    <SmallSharpPackagesProps>$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).smallsharp.props</SmallSharpPackagesProps>
    <SmallSharpPackagesTargets>$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).smallsharp.targets</SmallSharpPackagesTargets>
  </PropertyGroup>

  <ItemGroup>
    <!-- Ensures all top-level files show up in the IDE -->
    <None Include="*.cs" Exclude="$(ActiveDebugProfile);$(ActiveFile)" />
    <Compile Remove="*.cs" />
    <!-- Ensure changes we make to this file trigger a new DTB -->
    <UpToDateCheckBuilt Include="Properties\launchSettings.json" />
    <UpToDateCheckBuilt Include="$(SmallSharpPackagesProps);$(SmallSharpPackagesTargets)" />
    <Compile Update="@(Compile -> WithMetadataValue('NuGetPackageId', 'SmallSharp'))" Visible="false" />
  </ItemGroup>

  <!-- When restoring, if we include the source files, we'd get duplicate references. -->
  <ItemGroup Condition="'$(MSBuildIsRestoring)' != 'true'">
    <Compile Include="$(ActiveDebugProfile)" Condition="Exists('$(ActiveDebugProfile)')" />
    <Compile Include="$(ActiveFile)" Condition="Exists('$(ActiveFile)') and '$(ActiveFile)' != '$(ActiveDebugProfile)'" />
  </ItemGroup>

  <Target Name="StartupFile" BeforeTargets="ResolvePackageAssets;CompileDesignTime;CollectUpToDateCheckInputDesignTime" DependsOnTargets="$(StartupFileDependsOn)" />

  <Target Name="EnsureProperties" Condition="'$(CheckSmallSharpRequirements)' != 'false'">
    <Error Code="SCS02" Condition="'$(_ImportProjectExtensionProps)' != 'true' or '$(_ImportProjectExtensionTargets)' != 'true'"
           Text="Setting ImportProjectExtensionProps and ImportProjectExtensionTargets project properties to 'true' is required by SmallSharp to support C# package and project directives." />
    <Error Code="SCS03" Condition="'$(ManagePackageVersionsCentrally)' == 'true'" 
           Text="Setting ManagePackageVersionsCentrally to 'true' is not supported by SmallSharp since C# program files can declare package references via #:package directives." />
    <Warning Code="SCS04" Condition="'$(UsingSmallSharpSDK)' != 'true'"
             Text='For maximum compatibility with file-based apps, use SmallSharp as an SDK instead of a package reference: &lt;Project Sdk="SmallSharp/$(SmallSharpVersion)"&gt;' />
  </Target>

  <Target Name="CollectStartupFile">
    <ItemGroup>
      <StartupFile Include="*.cs" />
    </ItemGroup>
  </Target>

  <!-- Defaults the startup file to the first Compile, if none previously selected. -->
  <Target Name="SelectStartupFile" Condition="'$(FindStartupFile)' == 'true'" Returns="$(StartupFile)">

    <ItemGroup>
      <ReversedCompile Include="@(StartupFile -> Reverse())" />
    </ItemGroup>
    <PropertyGroup>
      <StartupFile>%(ReversedCompile.Identity)</StartupFile>
    </PropertyGroup>

    <!-- If .user file doesn't exist at all, create it now -->
    <PropertyGroup Condition="!Exists('$(MSBuildProjectFullPath).user')">
      <UserProject>
        <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
          <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
            <DebuggerFlavor>ProjectDebugger</DebuggerFlavor>
          </PropertyGroup>
          <PropertyGroup>
            <ActiveDebugProfile>$(StartupFile)</ActiveDebugProfile>
          </PropertyGroup>
        </Project>
      </UserProject>
      <WriteStartupFile>false</WriteStartupFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(MSBuildProjectFullPath).user"
                      Lines="$(UserProject)"
                      Condition="!Exists('$(MSBuildProjectFullPath).user')" />

    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(StartupFile)"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(WriteStartupFile)' != 'false' and '$(StartupFile)' != ''"/>

    <XmlPeek XmlInputPath="$(MSBuildProjectFullPath).user"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile/text()"
             Namespaces="$(UserProjectNamespace)">
      <Output TaskParameter="Result" PropertyName="StartupDebugProfile" />
    </XmlPeek>

    <PropertyGroup Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'">
      <ActiveDebugProfileProperty>
        <ActiveDebugProfile>$(StartupFile)</ActiveDebugProfile>
      </ActiveDebugProfileProperty>
    </PropertyGroup>

    <!-- The ActiveDebugProfile property element may be missing, failing to write the value -->
    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(ActiveDebugProfileProperty)"
             Query="/msb:Project/msb:PropertyGroup"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <!-- Read again after we poke the ActiveDebugProfile property -->
    <XmlPeek XmlInputPath="$(MSBuildProjectFullPath).user"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile/text()"
             Namespaces="$(UserProjectNamespace)">
      <Output TaskParameter="Result" PropertyName="StartupDebugProfile" />
    </XmlPeek>

    <!-- The entire PropertyGroup could have been missing, failing to write the value -->
    <PropertyGroup Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'">
      <UserPropertyGroup>
        <PropertyGroup>
          <ActiveDebugProfile>$(StartupFile)</ActiveDebugProfile>
        </PropertyGroup>
      </UserPropertyGroup>
    </PropertyGroup>

    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(UserPropertyGroup)"
             Query="/msb:Project"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <!-- Read again after we poke the PropertyGroup -->
    <XmlPoke XmlInputPath="$(MSBuildProjectFullPath).user"
             Value="$(StartupFile)"
             Query="/msb:Project/msb:PropertyGroup/msb:ActiveDebugProfile"
             Namespaces="$(UserProjectNamespace)"
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

    <Warning Text="Could not set ActiveDebugProfile=$(StartupFile). Run the project once to fix it."
             Condition="'$(StartupFile)' != '' and '$(StartupDebugProfile)' != '$(StartupFile)'"/>

  </Target>

  <Target Name="SelectTopLevelCompile">
    <ItemGroup>
      <!-- We remove all top-level from Compile because copy/pasting startup files may end up 
           causing those items to be hardcoded in the .csproj -->
      <Compile Remove="@(Compile -> WithMetadataValue('RelativeDir', ''))" />
      <Compile Include="$(StartupFile)" Condition="'$(StartupFile)' != '' and Exists('$(StartupFile)')" />
      <UpToDateCheckInput Include="$(StartupFile)" Condition="'$(StartupFile)' != '' and Exists('$(StartupFile)')" />
    </ItemGroup>
  </Target>

  <Target Name="AfterClean">
    <Delete Files="$(MSBuildProjectDirectory)\Properties\launchSettings.json"
            Condition="Exists('$(MSBuildProjectDirectory)\Properties\launchSettings.json')" />
  </Target>

  <Target Name="UpdateLaunchSettings">
    <WriteLinesToFile File="$(MSBuildProjectDirectory)\Properties\launchSettings.json"
                      Lines="{ }"
                      Condition="!Exists('$(MSBuildProjectDirectory)\Properties\launchSettings.json')" />
    <SortItems Items="@(StartupFile)">
      <Output TaskParameter="SortedItems" ItemName="SortedStartupFile" />
    </SortItems>
    <JsonPoke ContentPath="$(MSBuildProjectDirectory)\Properties\launchSettings.json"
              Query="$.profiles['%(SortedStartupFile.Filename)%(SortedStartupFile.Extension)'].commandName"
              Value="Project" />
  </Target>

  <Target Name="EmitTargets" DependsOnTargets="CollectStartupFile;SelectTopLevelCompile;SelectStartupFile" 
          Inputs="@(Compile);$(ActiveDebugProfile);$(ActiveFile);Properties\launchSettings.json" 
          Outputs="$(SmallSharpPackagesProps);$(SmallSharpPackagesTargets)">
    <EmitTargets StartupFile="$(StartupFile)" 
                 UsingSDK="$(UsingSmallSharpSDK)"
                 PackageReferences="@(PackageReferences)"
                 PropsFile="$(SmallSharpPackagesProps)"
                 TargetsFile="$(SmallSharpPackagesTargets)"
                 BaseIntermediateOutputPath="$(BaseIntermediateOutputPath)">
      <Output TaskParameter="Packages" ItemName="FileBasedPackage" />
      <Output TaskParameter="Properties" PropertyName="FileBasedProperty" />
      <Output TaskParameter="Sdks" PropertyName="FileBasedSdk" />
      <Output TaskParameter="RestoreNeeded" PropertyName="RestoreNeeded" />
    </EmitTargets>
    <Error Code="SCS001" Condition="'@(FileBasedSdk)' != '' and '$(UsingSmallSharpSDK)' != 'true'"
           Text="Using #:sdk directives requires using SmallSharp as an SDK instead of a package reference: &lt;Project Sdk='SmallSharp/$(SmallSharpVersion)'&gt;" />
  </Target>

  <UsingTask TaskName="SortItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <!-- ITaskItem[] input and sorted output -->
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <SortedItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        SortedItems = Items.OrderBy(i => i.ItemSpec).ToArray();
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
